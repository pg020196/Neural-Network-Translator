#pragma once

/* Performs the prediction for a given set of input values. The input lenght must match the specification. */
float * predict(float * input);

/* Functions for each layer are specified in .h file to allow direct references for testing purposes.
Otherwise only prediction should be referenced externally.
The name of each helper function is composed as follows: LAYERNAME_(IF AVAILABLE:TYPE)_ACTION */
static float * activation_apply(float * input, uint16_t input_columns, uint16_t input_rows, uint16_t input_depth, uint8_t activation);
static float * bias_apply(float * input, uint16_t input_length, const float biases[], uint16_t bias_start_index);
static float * dense_apply(float * input, uint16_t number_of_previous_units, uint16_t number_of_current_units, const float weights[], uint16_t weights_start_index, const float biases[], uint16_t bias_start_index, uint8_t use_bias, uint8_t activation);
static float * padding_zero_apply(float * input, uint16_t input_columns, uint16_t input_rows, uint16_t input_depth, uint16_t pool_size_width, uint16_t pool_size_height);
static float * pooling_apply(float *input, uint16_t input_columns, uint16_t input_rows, uint16_t input_depth, uint8_t pooling_type, uint16_t pool_size_width, uint16_t pool_size_height, uint16_t horizontal_stride, uint16_t vertical_stride, uint8_t padding, uint16_t output_columns, uint16_t output_rows);
static float * pooling_avg_apply(float * input, uint16_t input_columns, uint16_t input_rows, uint16_t input_depth, uint16_t pool_size_width, uint16_t pool_size_height, uint16_t horizontal_stride, uint16_t vertical_stride, uint16_t output_columns, uint16_t output_rows);
static float * pooling_max_apply(float *input, uint16_t input_columns, uint16_t input_rows, uint16_t input_depth, uint16_t pool_size_width, uint16_t pool_size_height, uint16_t horizontal_stride, uint16_t vertical_stride, uint16_t output_columns, uint16_t output_rows);
static float * padding_values_apply(float *input, uint16_t input_columns, uint16_t input_rows, uint16_t input_depth, uint16_t number_of_padding_layers);

/* Helper functions to perform calculations*/
static uint16_t padding_calculate_size(uint16_t pool_size);
static uint16_t padding_calculate_output_size(uint16_t input_size, uint16_t padding_size);
static float activation_function_apply(uint8_t activation, float value, float denominator);