using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using Tensor;
using Activation;

namespace NeuralNetworkTests
{
    [TestClass]
    public class ActivationTests
    {
        [TestMethod]
        public void tanh_ND_CheckShapeAndValues()
        {
            // Arrange
            double lowerBound = -10;
            double upperBound = 10;
            int num = 101;
            var t = Tensor<double>.linspace(lowerBound, upperBound, num);
            var expectedResult = new Tensor<double>(new double[] { -1.0       , -0.99999999, -0.99999999, -0.99999999, -0.99999998,
                                                                   -0.99999997, -0.99999995, -0.99999993, -0.9999999 , -0.99999985,
                                                                   -0.99999977, -0.99999966, -0.9999995 , -0.99999925, -0.99999889,
                                                                   -0.99999834, -0.99999752, -0.9999963 , -0.99999448, -0.99999176,
                                                                   -0.99998771, -0.99998167, -0.99997265, -0.9999592 , -0.99993914,
                                                                   -0.9999092 , -0.99986455, -0.99979794, -0.99969858, -0.99955037,
                                                                   -0.9993293 , -0.9989996 , -0.99850794, -0.99777493, -0.9966824 ,
                                                                   -0.99505475, -0.99263152, -0.9890274 , -0.98367486, -0.97574313,
                                                                   -0.96402758, -0.94680601, -0.92166855, -0.88535165, -0.83365461,
                                                                   -0.76159416, -0.66403677, -0.53704957, -0.37994896, -0.19737532,
                                                                    0.0       ,  0.19737532,  0.37994896,  0.53704957,  0.66403677,
                                                                    0.76159416,  0.83365461,  0.88535165,  0.92166855,  0.94680601,
                                                                    0.96402758,  0.97574313,  0.98367486,  0.9890274 ,  0.99263152,
                                                                    0.99505475,  0.9966824 ,  0.99777493,  0.99850794,  0.9989996 ,
                                                                    0.9993293 ,  0.99955037,  0.99969858,  0.99979794,  0.99986455,
                                                                    0.9999092 ,  0.99993914,  0.9999592 ,  0.99997265,  0.99998167,
                                                                    0.99998771,  0.99999176,  0.99999448,  0.9999963 ,  0.99999752,
                                                                    0.99999834,  0.99999889,  0.99999925,  0.9999995 ,  0.99999966,
                                                                    0.99999977,  0.99999985,  0.9999999 ,  0.99999993,  0.99999995,
                                                                    0.99999997,  0.99999998,  0.99999999,  0.99999999,  0.99999999,
                                                                    1.0        });

            // Act
            IActivation<double> tanh = new Tanh<double>();
            var result = tanh.apply(t);

            // Assert
            CollectionAssert.AreEqual(expectedResult.Shape, result.Shape, "Failed to produce correct shape for tanh activation");
            for (int i = 0; i < num; i++)
                Assert.AreEqual(expectedResult[i], result[i], 1e-8, "Failed to compute correct values for tanh activation");
        }

        [TestMethod]
        public void tanh_NDInplace_CheckShapeAndValuesAndInplaceness()
        {
            // Arrange
            double lowerBound = -10;
            double upperBound = 10;
            int num = 101;
            var t = Tensor<double>.linspace(lowerBound, upperBound, num);
            var expectedResult = new Tensor<double>(new double[] { -1.0       , -0.99999999, -0.99999999, -0.99999999, -0.99999998,
                                                                   -0.99999997, -0.99999995, -0.99999993, -0.9999999 , -0.99999985,
                                                                   -0.99999977, -0.99999966, -0.9999995 , -0.99999925, -0.99999889,
                                                                   -0.99999834, -0.99999752, -0.9999963 , -0.99999448, -0.99999176,
                                                                   -0.99998771, -0.99998167, -0.99997265, -0.9999592 , -0.99993914,
                                                                   -0.9999092 , -0.99986455, -0.99979794, -0.99969858, -0.99955037,
                                                                   -0.9993293 , -0.9989996 , -0.99850794, -0.99777493, -0.9966824 ,
                                                                   -0.99505475, -0.99263152, -0.9890274 , -0.98367486, -0.97574313,
                                                                   -0.96402758, -0.94680601, -0.92166855, -0.88535165, -0.83365461,
                                                                   -0.76159416, -0.66403677, -0.53704957, -0.37994896, -0.19737532,
                                                                    0.0       ,  0.19737532,  0.37994896,  0.53704957,  0.66403677,
                                                                    0.76159416,  0.83365461,  0.88535165,  0.92166855,  0.94680601,
                                                                    0.96402758,  0.97574313,  0.98367486,  0.9890274 ,  0.99263152,
                                                                    0.99505475,  0.9966824 ,  0.99777493,  0.99850794,  0.9989996 ,
                                                                    0.9993293 ,  0.99955037,  0.99969858,  0.99979794,  0.99986455,
                                                                    0.9999092 ,  0.99993914,  0.9999592 ,  0.99997265,  0.99998167,
                                                                    0.99998771,  0.99999176,  0.99999448,  0.9999963 ,  0.99999752,
                                                                    0.99999834,  0.99999889,  0.99999925,  0.9999995 ,  0.99999966,
                                                                    0.99999977,  0.99999985,  0.9999999 ,  0.99999993,  0.99999995,
                                                                    0.99999997,  0.99999998,  0.99999999,  0.99999999,  0.99999999,
                                                                    1.0        });

            // Act
            IActivation<double> tanh = new Tanh<double>();
            var result = tanh.apply(t, inplace: true);
            t[0] = 93.8;

            // Assert
            CollectionAssert.AreEqual(expectedResult.Shape, result.Shape, "Failed to produce correct shape for tanh activation");
            Assert.AreEqual(t[0], result[0], 1e-8, "Failed to override data inplace");
            for (int i = 1; i < num; i++)
                Assert.AreEqual(expectedResult[i], result[i], 1e-8, "Failed to compute correct values for tanh activation");
        }

        [TestMethod]
        public void tanh_NDNotInplace_CheckShapeAndValuesAndInplaceness()
        {
            // Arrange
            double lowerBound = -10;
            double upperBound = 10;
            int num = 101;
            var t = Tensor<double>.linspace(lowerBound, upperBound, num);
            var expectedResult = new Tensor<double>(new double[] { -1.0       , -0.99999999, -0.99999999, -0.99999999, -0.99999998,
                                                                   -0.99999997, -0.99999995, -0.99999993, -0.9999999 , -0.99999985,
                                                                   -0.99999977, -0.99999966, -0.9999995 , -0.99999925, -0.99999889,
                                                                   -0.99999834, -0.99999752, -0.9999963 , -0.99999448, -0.99999176,
                                                                   -0.99998771, -0.99998167, -0.99997265, -0.9999592 , -0.99993914,
                                                                   -0.9999092 , -0.99986455, -0.99979794, -0.99969858, -0.99955037,
                                                                   -0.9993293 , -0.9989996 , -0.99850794, -0.99777493, -0.9966824 ,
                                                                   -0.99505475, -0.99263152, -0.9890274 , -0.98367486, -0.97574313,
                                                                   -0.96402758, -0.94680601, -0.92166855, -0.88535165, -0.83365461,
                                                                   -0.76159416, -0.66403677, -0.53704957, -0.37994896, -0.19737532,
                                                                    0.0       ,  0.19737532,  0.37994896,  0.53704957,  0.66403677,
                                                                    0.76159416,  0.83365461,  0.88535165,  0.92166855,  0.94680601,
                                                                    0.96402758,  0.97574313,  0.98367486,  0.9890274 ,  0.99263152,
                                                                    0.99505475,  0.9966824 ,  0.99777493,  0.99850794,  0.9989996 ,
                                                                    0.9993293 ,  0.99955037,  0.99969858,  0.99979794,  0.99986455,
                                                                    0.9999092 ,  0.99993914,  0.9999592 ,  0.99997265,  0.99998167,
                                                                    0.99998771,  0.99999176,  0.99999448,  0.9999963 ,  0.99999752,
                                                                    0.99999834,  0.99999889,  0.99999925,  0.9999995 ,  0.99999966,
                                                                    0.99999977,  0.99999985,  0.9999999 ,  0.99999993,  0.99999995,
                                                                    0.99999997,  0.99999998,  0.99999999,  0.99999999,  0.99999999,
                                                                    1.0        });

            // Act
            IActivation<double> tanh = new Tanh<double>();
            var result = tanh.apply(t, inplace: false);
            t[0] = 93.8;

            // Assert
            CollectionAssert.AreEqual(expectedResult.Shape, result.Shape, "Failed to produce correct shape for tanh activation");
            for (int i = 0; i < num; i++)
                Assert.AreEqual(expectedResult[i], result[i], 1e-8, "Failed to compute correct values for tanh activation");
        }

        [TestMethod]
        public void relu_ND_CheckShapeAndValues()
        {
            // Arrange
            int[] shape = { 16, 8 };
            var t = new Tensor<double>(new double[] { -10.0      ,  -9.84251969,  -9.68503937,  -9.52755906,
                                                      -9.37007874,  -9.21259843,  -9.05511811,  -8.8976378 ,
                                                      -8.74015748,  -8.58267717,  -8.42519685,  -8.26771654,
                                                      -8.11023622,  -7.95275591,  -7.79527559,  -7.63779528,
                                                      -7.48031496,  -7.32283465,  -7.16535433,  -7.00787402,
                                                      -6.8503937 ,  -6.69291339,  -6.53543307,  -6.37795276,
                                                      -6.22047244,  -6.06299213,  -5.90551181,  -5.7480315 ,
                                                      -5.59055118,  -5.43307087,  -5.27559055,  -5.11811024,
                                                      -4.96062992,  -4.80314961,  -4.64566929,  -4.48818898,
                                                      -4.33070866,  -4.17322835,  -4.01574803,  -3.85826772,
                                                      -3.7007874 ,  -3.54330709,  -3.38582677,  -3.22834646,
                                                      -3.07086614,  -2.91338583,  -2.75590551,  -2.5984252 ,
                                                      -2.44094488,  -2.28346457,  -2.12598425,  -1.96850394,
                                                      -1.81102362,  -1.65354331,  -1.49606299,  -1.33858268,
                                                      -1.18110236,  -1.02362205,  -0.86614173,  -0.70866142,
                                                      -0.5511811 ,  -0.39370079,  -0.23622047,  -0.07874016,
                                                       0.07874016,   0.23622047,   0.39370079,   0.5511811 ,
                                                       0.70866142,   0.86614173,   1.02362205,   1.18110236,
                                                       1.33858268,   1.49606299,   1.65354331,   1.81102362,
                                                       1.96850394,   2.12598425,   2.28346457,   2.44094488,
                                                       2.5984252 ,   2.75590551,   2.91338583,   3.07086614,
                                                       3.22834646,   3.38582677,   3.54330709,   3.7007874 ,
                                                       3.85826772,   4.01574803,   4.17322835,   4.33070866,
                                                       4.48818898,   4.64566929,   4.80314961,   4.96062992,
                                                       5.11811024,   5.27559055,   5.43307087,   5.59055118,
                                                       5.7480315 ,   5.90551181,   6.06299213,   6.22047244,
                                                       6.37795276,   6.53543307,   6.69291339,   6.8503937 ,
                                                       7.00787402,   7.16535433,   7.32283465,   7.48031496,
                                                       7.63779528,   7.79527559,   7.95275591,   8.11023622,
                                                       8.26771654,   8.42519685,   8.58267717,   8.74015748,
                                                       8.8976378 ,   9.05511811,   9.21259843,   9.37007874,
                                                       9.52755906,   9.68503937,   9.84251969,  10.0        });
            t = t.reshape(shape);
            var expectedResult = new Tensor<double>(new double[] {0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.07874016,
                                                                  0.23622047,  0.39370079,  0.5511811 ,  0.70866142,  0.86614173,
                                                                  1.02362205,  1.18110236,  1.33858268,  1.49606299,  1.65354331,
                                                                  1.81102362,  1.96850394,  2.12598425,  2.28346457,  2.44094488,
                                                                  2.5984252 ,  2.75590551,  2.91338583,  3.07086614,  3.22834646,
                                                                  3.38582677,  3.54330709,  3.7007874 ,  3.85826772,  4.01574803,
                                                                  4.17322835,  4.33070866,  4.48818898,  4.64566929,  4.80314961,
                                                                  4.96062992,  5.11811024,  5.27559055,  5.43307087,  5.59055118,
                                                                  5.7480315 ,  5.90551181,  6.06299213,  6.22047244,  6.37795276,
                                                                  6.53543307,  6.69291339,  6.8503937 ,  7.00787402,  7.16535433,
                                                                  7.32283465,  7.48031496,  7.63779528,  7.79527559,  7.95275591,
                                                                  8.11023622,  8.26771654,  8.42519685,  8.58267717,  8.74015748,
                                                                  8.8976378 ,  9.05511811,  9.21259843,  9.37007874,  9.52755906,
                                                                  9.68503937,  9.84251969, 10.0        });
            expectedResult = expectedResult.reshape(shape);

            // Act
            IActivation<double> relu = new ReLU<double>();
            var result = relu.apply(t);

            // Arrange
            CollectionAssert.AreEqual(expectedResult.Shape, result.Shape, "Failed to produce correct shape for ReLU activation");
            var tmp0 = expectedResult.flatten();
            var tmp1 = result.flatten();
            for (int i = 0; i < t.NumElems; i++)
                Assert.AreEqual(tmp0[i], tmp1[i], 1e-8, "Failed to compute correct values for ReLU activation");
        }

        [TestMethod]
        public void relu_NDInplace_CheckShapeAndValues()
        {
            // Arrange
            int[] shape = { 16, 8 };
            var t = new Tensor<double>(new double[] { -10.0      ,  -9.84251969,  -9.68503937,  -9.52755906,
                                                      -9.37007874,  -9.21259843,  -9.05511811,  -8.8976378 ,
                                                      -8.74015748,  -8.58267717,  -8.42519685,  -8.26771654,
                                                      -8.11023622,  -7.95275591,  -7.79527559,  -7.63779528,
                                                      -7.48031496,  -7.32283465,  -7.16535433,  -7.00787402,
                                                      -6.8503937 ,  -6.69291339,  -6.53543307,  -6.37795276,
                                                      -6.22047244,  -6.06299213,  -5.90551181,  -5.7480315 ,
                                                      -5.59055118,  -5.43307087,  -5.27559055,  -5.11811024,
                                                      -4.96062992,  -4.80314961,  -4.64566929,  -4.48818898,
                                                      -4.33070866,  -4.17322835,  -4.01574803,  -3.85826772,
                                                      -3.7007874 ,  -3.54330709,  -3.38582677,  -3.22834646,
                                                      -3.07086614,  -2.91338583,  -2.75590551,  -2.5984252 ,
                                                      -2.44094488,  -2.28346457,  -2.12598425,  -1.96850394,
                                                      -1.81102362,  -1.65354331,  -1.49606299,  -1.33858268,
                                                      -1.18110236,  -1.02362205,  -0.86614173,  -0.70866142,
                                                      -0.5511811 ,  -0.39370079,  -0.23622047,  -0.07874016,
                                                       0.07874016,   0.23622047,   0.39370079,   0.5511811 ,
                                                       0.70866142,   0.86614173,   1.02362205,   1.18110236,
                                                       1.33858268,   1.49606299,   1.65354331,   1.81102362,
                                                       1.96850394,   2.12598425,   2.28346457,   2.44094488,
                                                       2.5984252 ,   2.75590551,   2.91338583,   3.07086614,
                                                       3.22834646,   3.38582677,   3.54330709,   3.7007874 ,
                                                       3.85826772,   4.01574803,   4.17322835,   4.33070866,
                                                       4.48818898,   4.64566929,   4.80314961,   4.96062992,
                                                       5.11811024,   5.27559055,   5.43307087,   5.59055118,
                                                       5.7480315 ,   5.90551181,   6.06299213,   6.22047244,
                                                       6.37795276,   6.53543307,   6.69291339,   6.8503937 ,
                                                       7.00787402,   7.16535433,   7.32283465,   7.48031496,
                                                       7.63779528,   7.79527559,   7.95275591,   8.11023622,
                                                       8.26771654,   8.42519685,   8.58267717,   8.74015748,
                                                       8.8976378 ,   9.05511811,   9.21259843,   9.37007874,
                                                       9.52755906,   9.68503937,   9.84251969,  10.0        });
            t = t.reshape(shape);
            var expectedResult = new Tensor<double>(new double[] {0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.07874016,
                                                                  0.23622047,  0.39370079,  0.5511811 ,  0.70866142,  0.86614173,
                                                                  1.02362205,  1.18110236,  1.33858268,  1.49606299,  1.65354331,
                                                                  1.81102362,  1.96850394,  2.12598425,  2.28346457,  2.44094488,
                                                                  2.5984252 ,  2.75590551,  2.91338583,  3.07086614,  3.22834646,
                                                                  3.38582677,  3.54330709,  3.7007874 ,  3.85826772,  4.01574803,
                                                                  4.17322835,  4.33070866,  4.48818898,  4.64566929,  4.80314961,
                                                                  4.96062992,  5.11811024,  5.27559055,  5.43307087,  5.59055118,
                                                                  5.7480315 ,  5.90551181,  6.06299213,  6.22047244,  6.37795276,
                                                                  6.53543307,  6.69291339,  6.8503937 ,  7.00787402,  7.16535433,
                                                                  7.32283465,  7.48031496,  7.63779528,  7.79527559,  7.95275591,
                                                                  8.11023622,  8.26771654,  8.42519685,  8.58267717,  8.74015748,
                                                                  8.8976378 ,  9.05511811,  9.21259843,  9.37007874,  9.52755906,
                                                                  9.68503937,  9.84251969, 10.0        });
            expectedResult = expectedResult.reshape(shape);

            // Act
            IActivation<double> relu = new ReLU<double>();
            var result = relu.apply(t, inplace:true);
            t[0, 0] = 193.8;

            // Arrange
            CollectionAssert.AreEqual(expectedResult.Shape, result.Shape, "Failed to produce correct shape for ReLU activation");
            var tmp0 = expectedResult.flatten();
            var tmp1 = result.flatten();
            Assert.AreEqual(t[0, 0], result[0, 0], "Failed to override data inplace");
            for (int i = 1; i < t.NumElems; i++)
                Assert.AreEqual(tmp0[i], tmp1[i], 1e-8, "Failed to compute correct values for ReLU activation");
        }

        [TestMethod]
        public void relu_NDNotInplace_CheckShapeAndValues()
        {
            // Arrange
            int[] shape = { 16, 8 };
            var t = new Tensor<double>(new double[] { -10.0      ,  -9.84251969,  -9.68503937,  -9.52755906,
                                                      -9.37007874,  -9.21259843,  -9.05511811,  -8.8976378 ,
                                                      -8.74015748,  -8.58267717,  -8.42519685,  -8.26771654,
                                                      -8.11023622,  -7.95275591,  -7.79527559,  -7.63779528,
                                                      -7.48031496,  -7.32283465,  -7.16535433,  -7.00787402,
                                                      -6.8503937 ,  -6.69291339,  -6.53543307,  -6.37795276,
                                                      -6.22047244,  -6.06299213,  -5.90551181,  -5.7480315 ,
                                                      -5.59055118,  -5.43307087,  -5.27559055,  -5.11811024,
                                                      -4.96062992,  -4.80314961,  -4.64566929,  -4.48818898,
                                                      -4.33070866,  -4.17322835,  -4.01574803,  -3.85826772,
                                                      -3.7007874 ,  -3.54330709,  -3.38582677,  -3.22834646,
                                                      -3.07086614,  -2.91338583,  -2.75590551,  -2.5984252 ,
                                                      -2.44094488,  -2.28346457,  -2.12598425,  -1.96850394,
                                                      -1.81102362,  -1.65354331,  -1.49606299,  -1.33858268,
                                                      -1.18110236,  -1.02362205,  -0.86614173,  -0.70866142,
                                                      -0.5511811 ,  -0.39370079,  -0.23622047,  -0.07874016,
                                                       0.07874016,   0.23622047,   0.39370079,   0.5511811 ,
                                                       0.70866142,   0.86614173,   1.02362205,   1.18110236,
                                                       1.33858268,   1.49606299,   1.65354331,   1.81102362,
                                                       1.96850394,   2.12598425,   2.28346457,   2.44094488,
                                                       2.5984252 ,   2.75590551,   2.91338583,   3.07086614,
                                                       3.22834646,   3.38582677,   3.54330709,   3.7007874 ,
                                                       3.85826772,   4.01574803,   4.17322835,   4.33070866,
                                                       4.48818898,   4.64566929,   4.80314961,   4.96062992,
                                                       5.11811024,   5.27559055,   5.43307087,   5.59055118,
                                                       5.7480315 ,   5.90551181,   6.06299213,   6.22047244,
                                                       6.37795276,   6.53543307,   6.69291339,   6.8503937 ,
                                                       7.00787402,   7.16535433,   7.32283465,   7.48031496,
                                                       7.63779528,   7.79527559,   7.95275591,   8.11023622,
                                                       8.26771654,   8.42519685,   8.58267717,   8.74015748,
                                                       8.8976378 ,   9.05511811,   9.21259843,   9.37007874,
                                                       9.52755906,   9.68503937,   9.84251969,  10.0        });
            t = t.reshape(shape);
            var expectedResult = new Tensor<double>(new double[] {0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.0       ,
                                                                  0.0       ,  0.0       ,  0.0       ,  0.0       ,  0.07874016,
                                                                  0.23622047,  0.39370079,  0.5511811 ,  0.70866142,  0.86614173,
                                                                  1.02362205,  1.18110236,  1.33858268,  1.49606299,  1.65354331,
                                                                  1.81102362,  1.96850394,  2.12598425,  2.28346457,  2.44094488,
                                                                  2.5984252 ,  2.75590551,  2.91338583,  3.07086614,  3.22834646,
                                                                  3.38582677,  3.54330709,  3.7007874 ,  3.85826772,  4.01574803,
                                                                  4.17322835,  4.33070866,  4.48818898,  4.64566929,  4.80314961,
                                                                  4.96062992,  5.11811024,  5.27559055,  5.43307087,  5.59055118,
                                                                  5.7480315 ,  5.90551181,  6.06299213,  6.22047244,  6.37795276,
                                                                  6.53543307,  6.69291339,  6.8503937 ,  7.00787402,  7.16535433,
                                                                  7.32283465,  7.48031496,  7.63779528,  7.79527559,  7.95275591,
                                                                  8.11023622,  8.26771654,  8.42519685,  8.58267717,  8.74015748,
                                                                  8.8976378 ,  9.05511811,  9.21259843,  9.37007874,  9.52755906,
                                                                  9.68503937,  9.84251969, 10.0        });
            expectedResult = expectedResult.reshape(shape);

            // Act
            IActivation<double> relu = new ReLU<double>();
            var result = relu.apply(t, inplace: false);
            t[0, 0] = 193.8;

            // Arrange
            CollectionAssert.AreEqual(expectedResult.Shape, result.Shape, "Failed to produce correct shape for ReLU activation");
            var tmp0 = expectedResult.flatten();
            var tmp1 = result.flatten();
            for (int i = 0; i < t.NumElems; i++)
                Assert.AreEqual(tmp0[i], tmp1[i], 1e-8, "Failed to compute correct values for ReLU activation");
        }

        [TestMethod]
        public void Sigmoid_ND_CheckResultShapeAndValue()
        {
            // Arrange
            int[] shape = { 3, 4, 3 };
            var t = new Tensor<double>(new double[] {-5.0       , -4.71428571, -4.42857143, -4.14285714, -3.85714286,
                                                     -3.57142857, -3.28571429, -3.0       , -2.71428571, -2.42857143,
                                                     -2.14285714, -1.85714286, -1.57142857, -1.28571429, -1.0       ,
                                                     -0.71428571, -0.42857143, -0.14285714,  0.14285714,  0.42857143,
                                                      0.71428571,  1.0       ,  1.28571429,  1.57142857,  1.85714286,
                                                      2.14285714,  2.42857143,  2.71428571,  3.0       ,  3.28571429,
                                                      3.57142857,  3.85714286,  4.14285714,  4.42857143,  4.71428571,
                                                      5.0        });
            t = t.reshape(shape);

            var expectedResult = new Tensor<double>(new double[] {0.00669285, 0.00888659, 0.01179084, 0.01562927, 0.02069111,
                                                                  0.02734679, 0.03606454, 0.04742587, 0.06213563, 0.08101977,
                                                                  0.10500059, 0.13503642, 0.17201283, 0.2165791 , 0.26894142,
                                                                  0.32865255, 0.39446751, 0.46434633, 0.53565367, 0.60553249,
                                                                  0.67134745, 0.73105858, 0.7834209 , 0.82798717, 0.86496358,
                                                                  0.89499941, 0.91898023, 0.93786437, 0.95257413, 0.96393546,
                                                                  0.97265321, 0.97930889, 0.98437073, 0.98820916, 0.99111341,
                                                                  0.99330715});
            expectedResult = expectedResult.reshape(shape);

            // Act
            IActivation<double> sigmoid = new Sigmoid<double>();
            var result = sigmoid.apply(t);

            // Assert
            CollectionAssert.AreEqual(expectedResult.Shape, result.Shape, "Failed to produce correct shape for sigmoid activation");
            var tmp0 = expectedResult.flatten();
            var tmp1 = result.flatten();
            for (int i = 0; i < t.NumElems; i++)
                Assert.AreEqual(tmp0[i], tmp1[i], 1e-8, "Failed to compute correct values for sigmoid activation");
        }

        [TestMethod]
        public void Sigmoid_NDInplace_CheckResultShapeAndValue()
        {
            // Arrange
            int[] shape = { 3, 4, 3 };
            var t = new Tensor<double>(new double[] {-5.0       , -4.71428571, -4.42857143, -4.14285714, -3.85714286,
                                                     -3.57142857, -3.28571429, -3.0       , -2.71428571, -2.42857143,
                                                     -2.14285714, -1.85714286, -1.57142857, -1.28571429, -1.0       ,
                                                     -0.71428571, -0.42857143, -0.14285714,  0.14285714,  0.42857143,
                                                      0.71428571,  1.0       ,  1.28571429,  1.57142857,  1.85714286,
                                                      2.14285714,  2.42857143,  2.71428571,  3.0       ,  3.28571429,
                                                      3.57142857,  3.85714286,  4.14285714,  4.42857143,  4.71428571,
                                                      5.0        });
            t = t.reshape(shape);

            var expectedResult = new Tensor<double>(new double[] {0.00669285, 0.00888659, 0.01179084, 0.01562927, 0.02069111,
                                                                  0.02734679, 0.03606454, 0.04742587, 0.06213563, 0.08101977,
                                                                  0.10500059, 0.13503642, 0.17201283, 0.2165791 , 0.26894142,
                                                                  0.32865255, 0.39446751, 0.46434633, 0.53565367, 0.60553249,
                                                                  0.67134745, 0.73105858, 0.7834209 , 0.82798717, 0.86496358,
                                                                  0.89499941, 0.91898023, 0.93786437, 0.95257413, 0.96393546,
                                                                  0.97265321, 0.97930889, 0.98437073, 0.98820916, 0.99111341,
                                                                  0.99330715});
            expectedResult = expectedResult.reshape(shape);

            // Act
            IActivation<double> sigmoid = new Sigmoid<double>();
            var result = sigmoid.apply(t, inplace:true);
            t[0, 0, 0] = 651.58;

            // Assert
            CollectionAssert.AreEqual(expectedResult.Shape, result.Shape, "Failed to produce correct shape for sigmoid activation");
            var tmp0 = expectedResult.flatten();
            var tmp1 = result.flatten();
            Assert.AreEqual(t[0, 0, 0], result[0, 0, 0], 1e-8, "Failed to override data inplace");
            for (int i = 1; i < t.NumElems; i++)
                Assert.AreEqual(tmp0[i], tmp1[i], 1e-8, "Failed to compute correct values for sigmoid activation");
        }

        [TestMethod]
        public void Sigmoid_NDNotInplace_CheckResultShapeAndValue()
        {
            // Arrange
            int[] shape = { 3, 4, 3 };
            var t = new Tensor<double>(new double[] {-5.0       , -4.71428571, -4.42857143, -4.14285714, -3.85714286,
                                                     -3.57142857, -3.28571429, -3.0       , -2.71428571, -2.42857143,
                                                     -2.14285714, -1.85714286, -1.57142857, -1.28571429, -1.0       ,
                                                     -0.71428571, -0.42857143, -0.14285714,  0.14285714,  0.42857143,
                                                      0.71428571,  1.0       ,  1.28571429,  1.57142857,  1.85714286,
                                                      2.14285714,  2.42857143,  2.71428571,  3.0       ,  3.28571429,
                                                      3.57142857,  3.85714286,  4.14285714,  4.42857143,  4.71428571,
                                                      5.0        });
            t = t.reshape(shape);

            var expectedResult = new Tensor<double>(new double[] {0.00669285, 0.00888659, 0.01179084, 0.01562927, 0.02069111,
                                                                  0.02734679, 0.03606454, 0.04742587, 0.06213563, 0.08101977,
                                                                  0.10500059, 0.13503642, 0.17201283, 0.2165791 , 0.26894142,
                                                                  0.32865255, 0.39446751, 0.46434633, 0.53565367, 0.60553249,
                                                                  0.67134745, 0.73105858, 0.7834209 , 0.82798717, 0.86496358,
                                                                  0.89499941, 0.91898023, 0.93786437, 0.95257413, 0.96393546,
                                                                  0.97265321, 0.97930889, 0.98437073, 0.98820916, 0.99111341,
                                                                  0.99330715});
            expectedResult = expectedResult.reshape(shape);

            // Act
            IActivation<double> sigmoid = new Sigmoid<double>();
            var result = sigmoid.apply(t, inplace: false);
            t[0, 0, 0] = 651.58;

            // Assert
            CollectionAssert.AreEqual(expectedResult.Shape, result.Shape, "Failed to produce correct shape for sigmoid activation");
            var tmp0 = expectedResult.flatten();
            var tmp1 = result.flatten();
            for (int i = 0; i < t.NumElems; i++)
                Assert.AreEqual(tmp0[i], tmp1[i], 1e-8, "Failed to compute correct values for sigmoid activation");
        }


        [TestMethod]
        public void Softmax_ND_CheckResultShapeAndValues()
        {
            // Arrange
            int[] shape = { 8, 5 };
            var t = new Tensor<double>(new double[] {0.56202544, 0.69172508, 0.10145327, 0.17874286, 0.19818892,
                                                     0.29696772, 0.99695361, 0.87152544, 0.00751397, 0.86858833,
                                                     0.35885264, 0.08219610, 0.89305255, 0.28602106, 0.47870285,
                                                     0.51825348, 0.87568944, 0.71909816, 0.31103022, 0.51107807,
                                                     0.26203344, 0.32747324, 0.72864947, 0.32908185, 0.98133528,
                                                     0.24748835, 0.06102629, 0.93192325, 0.05170797, 0.12424942,
                                                     0.87193061, 0.45798664, 0.92617347, 0.0663846 , 0.50570096,
                                                     0.43540397, 0.07480585, 0.50376684, 0.7919741 , 0.67529348});
            t = t.reshape(shape);
            var expectedResult = new Tensor<double>(new double[] {0.24119436, 0.27459649, 0.15217496, 0.16440296, 0.16763124,
                                                                  0.13680122, 0.27547993, 0.24300612, 0.10241930, 0.24229343,
                                                                  0.18111076, 0.13733899, 0.30898994, 0.16838907, 0.20417123,
                                                                  0.18322460, 0.26194870, 0.22398015, 0.14893195, 0.18191460,
                                                                  0.14739340, 0.15736139, 0.23503190, 0.15761473, 0.30259857,
                                                                  0.18119926, 0.15037546, 0.35925491, 0.14898072, 0.16018964,
                                                                  0.25927112, 0.17138806, 0.27372314, 0.11585371, 0.17976396,
                                                                  0.18289750, 0.12752696, 0.19583819, 0.26125476, 0.23248260});
            expectedResult = expectedResult.reshape(shape);

            // Act
            IActivation<double> softmax = new Softmax<double>();
            var result = softmax.apply(t);

            // Assert
            CollectionAssert.AreEqual(expectedResult.Shape, result.Shape, "Failed to produce correct shape for sigmoid activation");
            var tmp0 = expectedResult.flatten();
            var tmp1 = result.flatten();
            for (int i = 0; i < t.NumElems; i++)
                Assert.AreEqual(tmp0[i], tmp1[i], 1e-8, "Failed to compute correct values for sigmoid activation");
        }

        [TestMethod]
        public void Softmax_NDInplace_CheckResultShapeAndValues()
        {
            // Arrange
            int[] shape = { 8, 5 };
            var t = new Tensor<double>(new double[] {0.56202544, 0.69172508, 0.10145327, 0.17874286, 0.19818892,
                                                     0.29696772, 0.99695361, 0.87152544, 0.00751397, 0.86858833,
                                                     0.35885264, 0.08219610, 0.89305255, 0.28602106, 0.47870285,
                                                     0.51825348, 0.87568944, 0.71909816, 0.31103022, 0.51107807,
                                                     0.26203344, 0.32747324, 0.72864947, 0.32908185, 0.98133528,
                                                     0.24748835, 0.06102629, 0.93192325, 0.05170797, 0.12424942,
                                                     0.87193061, 0.45798664, 0.92617347, 0.0663846 , 0.50570096,
                                                     0.43540397, 0.07480585, 0.50376684, 0.7919741 , 0.67529348});
            t = t.reshape(shape);
            var expectedResult = new Tensor<double>(new double[] {0.24119436, 0.27459649, 0.15217496, 0.16440296, 0.16763124,
                                                                  0.13680122, 0.27547993, 0.24300612, 0.10241930, 0.24229343,
                                                                  0.18111076, 0.13733899, 0.30898994, 0.16838907, 0.20417123,
                                                                  0.18322460, 0.26194870, 0.22398015, 0.14893195, 0.18191460,
                                                                  0.14739340, 0.15736139, 0.23503190, 0.15761473, 0.30259857,
                                                                  0.18119926, 0.15037546, 0.35925491, 0.14898072, 0.16018964,
                                                                  0.25927112, 0.17138806, 0.27372314, 0.11585371, 0.17976396,
                                                                  0.18289750, 0.12752696, 0.19583819, 0.26125476, 0.23248260});
            expectedResult = expectedResult.reshape(shape);

            // Act
            IActivation<double> softmax = new Softmax<double>();
            var result = softmax.apply(t, inplace: true);
            t[0, 0] = 37.8;

            // Assert
            CollectionAssert.AreEqual(expectedResult.Shape, result.Shape, "Failed to produce correct shape for sigmoid activation");
            var tmp0 = expectedResult.flatten();
            var tmp1 = result.flatten();
            Assert.AreEqual(t[0, 0], result[0, 0], 1e-8, "Failed to override data inplace");
            for (int i = 1; i < t.NumElems; i++)
                Assert.AreEqual(tmp0[i], tmp1[i], 1e-8, "Failed to compute correct values for sigmoid activation");
        }

        [TestMethod]
        public void Softmax_NDNotInplace_CheckResultShapeAndValues()
        {
            // Arrange
            int[] shape = { 8, 5 };
            var t = new Tensor<double>(new double[] {0.56202544, 0.69172508, 0.10145327, 0.17874286, 0.19818892,
                                                     0.29696772, 0.99695361, 0.87152544, 0.00751397, 0.86858833,
                                                     0.35885264, 0.08219610, 0.89305255, 0.28602106, 0.47870285,
                                                     0.51825348, 0.87568944, 0.71909816, 0.31103022, 0.51107807,
                                                     0.26203344, 0.32747324, 0.72864947, 0.32908185, 0.98133528,
                                                     0.24748835, 0.06102629, 0.93192325, 0.05170797, 0.12424942,
                                                     0.87193061, 0.45798664, 0.92617347, 0.0663846 , 0.50570096,
                                                     0.43540397, 0.07480585, 0.50376684, 0.7919741 , 0.67529348});
            t = t.reshape(shape);
            var expectedResult = new Tensor<double>(new double[] {0.24119436, 0.27459649, 0.15217496, 0.16440296, 0.16763124,
                                                                  0.13680122, 0.27547993, 0.24300612, 0.10241930, 0.24229343,
                                                                  0.18111076, 0.13733899, 0.30898994, 0.16838907, 0.20417123,
                                                                  0.18322460, 0.26194870, 0.22398015, 0.14893195, 0.18191460,
                                                                  0.14739340, 0.15736139, 0.23503190, 0.15761473, 0.30259857,
                                                                  0.18119926, 0.15037546, 0.35925491, 0.14898072, 0.16018964,
                                                                  0.25927112, 0.17138806, 0.27372314, 0.11585371, 0.17976396,
                                                                  0.18289750, 0.12752696, 0.19583819, 0.26125476, 0.23248260});
            expectedResult = expectedResult.reshape(shape);

            // Act
            IActivation<double> softmax = new Softmax<double>();
            var result = softmax.apply(t, inplace: false);
            t[0, 0] = 37.8;

            // Assert
            CollectionAssert.AreEqual(expectedResult.Shape, result.Shape, "Failed to produce correct shape for sigmoid activation");
            var tmp0 = expectedResult.flatten();
            var tmp1 = result.flatten();
            for (int i = 0; i < t.NumElems; i++)
                Assert.AreEqual(tmp0[i], tmp1[i], 1e-8, "Failed to compute correct values for sigmoid activation");
        }

    }
}
